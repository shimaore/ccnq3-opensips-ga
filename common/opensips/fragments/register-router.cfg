# Name: register-router
# Group: register-handler
# Description: REGISTER handler for a router
# Status: untested

# -----------------------------------------------------------------
# REGISTER Message Handler: Router for a remote registrar
# -----------------------------------------------------------------

# Router for a remote registrar

route[register-record-route]
{
  # No message are terminated locally.
  record_route();
}

route[register-handler]
{
  xlog("L_DBG","-- register_handler -- REGISTER Message Handler from $source_uri [register-router]");

  ${register_nat}

  if( if has_trusted allow_trusted() || end if has_trusted 0 ) {
      xlog("L_DBG", "-- register_handler -- Trusted device $si ($fu) attempts to register");
  } else {
    route(authenticate_register);

    if (!db_check_to()) {
      xlog("L_WARN", "WARNING -- register_handler -- Rogue device $si ($fu) attempts to register");
      t_reply("401", "Unauthorized");
      exit;
    };
  }

  # Save the information for the registrar
  add_sock_hdr("Sock-Info");
  # See also http://www.opensips.org/html/docs/modules/1.4.x/nat_traversal.html#id270203
  # XXX save information about NAT (i.e. flags)

  # Forward to the registrar
  t_relay(...); # required for nat_keepalive() to work, see http://www.opensips.org/html/docs/modules/1.5.x/nat_traversal.html
}

macro lookup
  # Send to the registrar for resolution
  # The registrar will reply either with 302 or 404, which will be
  # handled by failure_route() in the router.

  # On 302 or 404, do:
  route(registered-static-line-side);
end macro lookup

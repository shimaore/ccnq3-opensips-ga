# Name: forwarder
# Description: Default message forwarder (for anything except ACK, PRACK, CANCEL and UPDATE); adds var-based headers and forward messages using t_relay()

# -------------------------------------------------------------------
# Default Message Forwarder (anything except ACK/PRACK/CANCEL/UPDATE)
# -------------------------------------------------------------------

# Note: in most cases (except from failure_route), a call to route(initial_forwarder) should be preceded by a call to route(update_media_proxy).

route[initial-forwarder] {
  xlog("L_DBG","-- route(initial_forwarder) Processing $rm $ru");

  if do_not_forward_register
  if(is_method("REGISTER")) {
      t_reply("500","Unsupported REGISTER");
      exit;
  }
  end if do_not_forward_register

  if not ignore_dest_domain
  if($(avp(dest_domain))) {
      xlog("L_DBG","-- route(initial_forwarder) Using destination $(avp(dest_domain))");
      $rd = $(avp(dest_domain));
  }
  end if not ignore_dest_domain

  remove_hf("P-Charge-Info");
  if not ignore_account
  if($(avp(account))) {
    # Add a P-Charge-Info header.
    # The username part is the account, while the domain part is copied from the RURI.
    append_hf("P-Charge-Info: sip:$(avp(account){s.escape.user})@$rd\r\n");
  }
  end if not ignore_account

  if not ignore_location
  #
  # # Use emergency location data if provided in the call
  # $var(location) = $(hdr(X-CCNQ3-Location));
  #

  # Use the number's location if it is available.
  # Otherwise use the subscriber's / endpoint location if it is available.
  if($json(src_number/location)) {
    $var(location) = $json(src_number/location);
    remove_hf("X-CCNQ3-Location");
    append_hf("X-CCNQ3-Location: $json(src_number/location)\r\n");
  } else {
    if($json(src_endpoint/location)) {
      $var(location) = $json(src_endpoint/location);
      remove_hf("X-CCNQ3-Location");
      append_hf("X-CCNQ3-Location: $json(src_endpoint/location)\r\n");
    }
  }
  end if not ignore_location

  if not ignore_routing_data
    xlog("L_DBG","-- route(initial_forwarder) -- Location = $var(location)");

    if( $var(location) && avp_db_load("$(var(location))","$(avp(location))") ) {
      $json(location) := $avp(location);
      remove_hf("X-CCNQ3-Routing");
      append_hf("X-CCNQ3-Routing: $json(location/routing_data)\r\n");
    }
  end if not ignore_routing_data

  if not ignore_rule_attrs
  if($avp(dr_rule_attrs)) {
    remove_hf("X-CCNQ3-Attrs");
    append_hf("X-CCNQ3-Attrs: $avp(dr_rule_attrs)\r\n");
  }
  end if not ignore_rule_attrs

  if not ignore_extra_info
  if($avp(extra_info)) {
    append_hf("X-CCNQ3-Extra: $avp(extra_info)\r\n");
  }
  end if not ignore_extra_info

  if not ignore_number_domain
  if($var(number_domain)) {
    remove_hf("X-CCNQ3-Number-Domain");
    append_hf("X-CCNQ3-Number-Domain: $var(number_domain)\r\n");
  }
  end if not ignore_number_domain

  if not ignore_masking
  # Insert a Privacy: id header if true.
  if($json(src_number/privacy) == "true") {
    remove_hf("Privacy");
    append_hf("Privacy: id\r\n");
  }
  # Insert a PAID header if non-empty.
  if($json(src_number/asserted_number)) {
    remove_hf("P-Asserted-Identity");
    append_hf("P-Asserted-Identity: <$json(src_number/asserted_number)@$fd>\r\n");
  }
  end if not ignore_masking

  serialize_branches(1);

  route(forwarder);
}

route[forwarder] {
  xlog("L_DBG","-- forwarder -- t_relay $rm $ru");

  if do_not_forward_register
  if(is_method("REGISTER")) {
      t_reply("500","Unsupported REGISTER");
      exit;
  }
  end if do_not_forward_register

  if (!t_relay("0x01")) { # Prevent dup 100
    # t_relay failed, check if we need to stop mediaproxy
    if (is_method("INVITE")) {
      route(stop-media-proxy); # End media session
    };
    t_reply("500","Transmission failure");
  }
  exit;
}

# -----------------------------------------------------------------
# Forward ACK, PRACK, CANCEL, and UPDATE
# -----------------------------------------------------------------

route[forwarder-progress]
{
  xlog("L_DBG","-- forwarder-progress -- ACK/PRACK/CANCEL/UPDATE Processing $rm $ru");

  if(!t_check_trans()) {
    xlog("L_DBG", "-- forwarder-progress -- Dropping mis-routed $rm (481)");
    # Can't send a reply to an ACK
    if(!is_method("ACK")) {
      t_reply("481", "Call/Transaction Does Not Exist");
    }
    exit;
  }

  xlog("L_DBG", "-- forwarder-progress -- t_relay $rm $ru");
  if(!t_relay("0x01")) { # Prevent dup 100
    # t_relay failed, check if we need to stop mediaproxy
    if (is_method("ACK")) {
      route(stop-media-proxy); # End media session
    } else { # Can't send a reply to an ACK
      t_reply("500","Transmission failure");
    }
  }
  exit;
}

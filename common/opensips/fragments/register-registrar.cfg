# Name: register-registrar
# Group: register-handler
# Description: REGISTER handler for a standalone registrar (UNFINISHED)

# -----------------------------------------------------------------
# REGISTER Message Handler: Registrar for a remote router
# -----------------------------------------------------------------

# Registrar for a remote router
define do_not_forward_register

route[register-handler]
{
  # Message comes from another registrar
  # For a registrar, the trusted table should list other registrars in the cluster.
  if( if has_trusted allow_trusted() || end if has_trusted 0 ) {
    xlog("L_DBG", "-- register_handler -- Forwarded REGISTER");
  } else {
    # If not coming from another registrar in the cluster, authenticate
    route(authenticate_register);
    if (!db_check_to()) {
      xlog("L_WARN", "WARNING -- register_handler -- Rogue device $si ($fu) attempts to register");
      t_reply("401", "Unauthorized");
      exit;
    };
    setflag(${flag_register_authenticated});
  }

  # Get the information from the router
  setflag(${flag_sock}); # sock_flag
  # XXX TODO Set the local flags, etc. from the headers

  if has_usrloc
  # Save the information
  if( !save("${usrloc_table}","${usrloc_flags}") ) {
    xlog("L_ERR", "ERROR -- register_handler -- could not save location $si ($fu).");
    t_reply("500", "Could not save location");
    exit;
  }
  end if has_usrloc

  # If not coming from another registrar in the cluster, forward to the other registrars in the cluster
  if(isflagset(${flag_register_authenticated})) {
    t_replicate(...)
    append_branch();
    t_on_failure...
  }
}

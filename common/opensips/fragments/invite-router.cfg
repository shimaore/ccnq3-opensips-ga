# Name: invite-router
# Group: invite_handlers
# Description: INVITE handler for a generic router

# -----------------------------------------------------------------
# INVITE Message Handler
# -----------------------------------------------------------------

define need_avp_db

route[invite-handler]
{
    xlog("L_DBG","-- invite-router -- $ru");

    t_on_failure("1");
    t_on_reply("1");

    # Attempt to locate the `number_domain` of the calling number,
    # assuming it is a local (on-net) number.
    if($json(src_endpoint/number_domain)) {
      xlog("L_DBG","-- invite-router -- src_number uses (endpoint) number_domain $json(src_endpoint/number_domain)");
      $var(number_domain) = $json(src_endpoint/number_domain);
    }

    # Locate the source "local number" record.
    $avp(number) := null;
    $var(local_number) = $fU+"@"+$var(number_domain);
    if(!cache_fetch("local","number $var(local_number)",$avp(number))) {
      if(!avp_db_load("$var(local_number)","$avp(number)")) {
        $avp(number) := '{}';
      }
      cache_store("local","number $var(local_number)","$avp(number)",${cache_timeout});
    }

    $json(src_number) := $avp(number);
    $avp(number) := null;

    if rate_limit
      if( $json(src_number/rate_limit) ) {
        if(!rl_check( "number_$json(src_number/number)", "$json(src_number/rate_limit)" )) {
          append_to_reply("Retry-After: ${rate_limit_latency}");
          sl_send_reply("503","Calling Number Rate Limit Exceeded");
          exit;
        }
      }
      if( $json(src_endpoint/rate_limit) ) {
        if(!rl_check( "endpoint_$json(src_endpoint/endpoint)", "$json(src_endpoint/rate_limit)" )) {
          append_to_reply("Retry-After: ${rate_limit_latency}");
          sl_send_reply("503","Calling Endpoint Rate Limit Exceeded");
          exit;
        }
      }
    end if rate_limit

    if( $json(src_number/max_channels) ) {
      set_dlg_profile("number","$json(src_number/number)");
      get_profile_size("number","$json(src_number/number)","$avp(size)");
      if($avp(size) > $json(src_number/max_channels)) {
          sl_send_reply("503","Calling Number Out-of-Channels");
      }
    }
    if( $json(src_endpoint/max_channels) ) {
      set_dlg_profile("endpoint","$json(src_endpoint/endpoint)");
      get_profile_size("endpoint","$json(src_endpoint/endpoint)","$avp(size)");
      if($avp(size) > $json(src_endpoint/max_channels)) {
          sl_send_reply("503","Calling Endpoint Out-of-Channels");
      }
    }


    route(lookup-src);

    if($avp(src_type) == "ONNET") {
      if($json(src_endpoint/allow_onnet) == "true") {
        route(try-line-side);
      }
      route(try-trunk-side);
    } else {
      # From Off-net
      route(try-line-side);
    }

    # Invalid destination
    t_reply("404", "User Not Found");
    exit;
}

route[lookup-src]
{

  # -- Inbound SBC
  if($json(src_endpoint/inbound_sbc) == ${sbc_own_upstream}) {
    $(avp(src_type)) = "PSTN";
    # Also trust the charging information, if any (normally none is present).
    avp_delete("$(avp(account))");
    $avp(account)     = $(hdr(P-Charge-Info){uri.user}{s.unescape.user});
    return;
  }

  # -- Outbound call, coming from line-side
  if($json(src_endpoint/endpoint)) {
    $(avp(src_type)) = "ONNET";
    if lineside_extra_info
    avp_printf("$(avp(extra_info))", "${lineside_extra_info}");
    end if lineside_extra_info

    if( $json(src_endpoint/src_disabled) == "true" ) {
      t_reply("403", "Administratively Forbidden");
      exit;
    }

    if not ignore_dest_domain
    if( (! isflagset(${flag_dest_domain_set}))
           && $json(src_endpoint/dest_domain) ) {
      setflag(${flag_dest_domain_set});
    }
    end if not ignore_dest_domain

    if( $json(src_endpoint/user_force_mp) == "true" ) {
      xlog("L_DBG","-- invite-router -- Force MediaProxy for $(json(src_endpoint/endpoint))");
      setflag(${flag_request_mp_caller}); # force MP for caller
    }

    if( $json(src_endpoint/check_from) == "true" ) {
      xlog("L_DBG","-- invite-router -- Checking From username");
      if( $json(src_number/endpoint) != $json(src_endpoint/endpoint) ) {
        t_reply("403", "From Username is not listed");
        exit;
      }
    }

    # Account selection
    avp_delete("$(avp(account))");

    switch($json(src_endpoint/sbc)) {
      case ${sbc_own_outbound}:
        # Trust the account information provided by this internal SBC.
        if($(hdr(P-Charge-Info))) {
          $avp(account)     = $(hdr(P-Charge-Info){uri.user}{s.unescape.user});
        }
        break;

      default:
        # Use the endpoint's account information.
        $avp(account)     = $json(src_endpoint/account);
    }
    #/ Account selection

    # Max call duration
    if( $json(src_endpoint/dialog_timer) ) {
      $avp(dialog_timer) = $json(src_endpoint/dialog_timer);
    }

    xlog("L_DBG","-- invite-router -- Customer device $(json(src_endpoint)) with account $(avp(account)).");
  }
}
